const { EmbedBuilder, PermissionFlagsBits } = require('discord.js');

module.exports = {
    name: 'reactionrole',
    aliases: ['rr', 'rolereaction'],
    description: 'Cr√©er un syst√®me de r√¥les par r√©action avec un message existant',
    async execute(message, args, client) {
        const config = client.config;
        
        // V√©rifier les permissions
        if (!message.member.permissions.has(PermissionFlagsBits.Administrator)) {
            const errorEmbed = new EmbedBuilder()
                .setColor('#FF0000')
                .setTitle('‚ùå Permissions insuffisantes')
                .setDescription('Vous devez √™tre administrateur pour utiliser cette commande.')
                .setFooter({ text: config.bot.embedFooter, iconURL: config.bot.embedFooterIcon })
                .setTimestamp();
            
            return message.reply({ embeds: [errorEmbed] });
        }

        // V√©rifier les arguments
        if (args.length !== 2) {
            const helpEmbed = new EmbedBuilder()
                .setColor('#FFA500')
                .setTitle('‚ùì Usage de la commande reactionrole')
                .setDescription('Configurez un syst√®me de r√¥les par r√©action avec un message existant')
                .addFields(
                    { name: 'üìù Syntaxe', value: '`!reactionrole <message_id> <r√¥le:√©moji>`', inline: false },
                    { name: 'üìã Exemples', value: '`!reactionrole 1234567890123456789 "Membre:‚úÖ"`\n`!reactionrole 1234567890123456789 "1234567890123456789:‚úÖ"`', inline: false },
                    { name: 'üí° Astuce', value: 'Pour les r√¥les avec caract√®res sp√©ciaux, utilisez l\'ID du r√¥le directement.', inline: false },
                    { name: '‚ö†Ô∏è Important', value: 'Un seul r√¥le par message. Le message doit exister et le bot doit avoir les permissions pour ajouter des r√©actions.', inline: false }
                )
                .setFooter({ text: config.bot.embedFooter, iconURL: config.bot.embedFooterIcon })
                .setTimestamp();
            
            return message.reply({ embeds: [helpEmbed] });
        }

        try {
            // Extraire l'ID du message
            const messageId = args[0];
            
            // V√©rifier si l'ID est valide
            if (!/^\d+$/.test(messageId)) {
                const errorEmbed = new EmbedBuilder()
                    .setColor('#FF0000')
                    .setTitle('‚ùå ID de message invalide')
                    .setDescription('L\'ID du message doit √™tre un nombre valide.')
                    .setFooter({ text: config.bot.embedFooter, iconURL: config.bot.embedFooterIcon })
                    .setTimestamp();
                
                return message.reply({ embeds: [errorEmbed] });
            }
            
            // R√©cup√©rer le message
            let targetMessage;
            try {
                targetMessage = await message.channel.messages.fetch(messageId);
            } catch (error) {
                const errorEmbed = new EmbedBuilder()
                    .setColor('#FF0000')
                    .setTitle('‚ùå Message non trouv√©')
                    .setDescription('Le message avec cet ID n\'a pas √©t√© trouv√© dans ce salon.')
                    .setFooter({ text: config.bot.embedFooter, iconURL: config.bot.embedFooterIcon })
                    .setTimestamp();
                
                return message.reply({ embeds: [errorEmbed] });
            }
            
            // Extraire le r√¥le et l'√©moji
            const roleEmojiPair = args[1];
            const [roleName, emoji] = roleEmojiPair.split(':');
            
            if (!roleName || !emoji) {
                const errorEmbed = new EmbedBuilder()
                    .setColor('#FF0000')
                    .setTitle('‚ùå Format invalide')
                    .setDescription('Le format doit √™tre: `r√¥le:√©moji`')
                    .setFooter({ text: config.bot.embedFooter, iconURL: config.bot.embedFooterIcon })
                    .setTimestamp();
                
                return message.reply({ embeds: [errorEmbed] });
            }
            
            console.log(`üîç Recherche du r√¥le: "${roleName}" avec √©moji: "${emoji}"`);
            console.log(`üìã R√¥les disponibles dans le serveur:`);
            message.guild.roles.cache.forEach(r => {
                console.log(`  - ${r.name} (ID: ${r.id})`);
            });
            
            // Trouver le r√¥le avec plusieurs m√©thodes
            let role = null;
            let methodUsed = '';
            
            // 1. Recherche exacte par nom
            role = message.guild.roles.cache.find(r => 
                r.name.toLowerCase() === roleName.toLowerCase()
            );
            if (role) {
                methodUsed = 'nom exact';
                console.log(`‚úÖ R√¥le trouv√© par nom exact: ${role.name}`);
            }
            
            // 2. Recherche par ID
            if (!role) {
                role = message.guild.roles.cache.find(r => 
                    r.id === roleName
                );
                if (role) {
                    methodUsed = 'ID';
                    console.log(`‚úÖ R√¥le trouv√© par ID: ${role.name}`);
                }
            }
            
            // 3. Recherche par mention
            if (!role) {
                const mentionMatch = roleName.match(/<@&(\d+)>/);
                if (mentionMatch) {
                    role = message.guild.roles.cache.get(mentionMatch[1]);
                    if (role) {
                        methodUsed = 'mention';
                        console.log(`‚úÖ R√¥le trouv√© par mention: ${role.name}`);
                    }
                }
            }
            
            // 4. Recherche partielle (plus stricte)
            if (!role) {
                const matchingRoles = message.guild.roles.cache.filter(r => 
                    r.name.toLowerCase().includes(roleName.toLowerCase())
                );
                
                if (matchingRoles.size === 1) {
                    role = matchingRoles.first();
                    methodUsed = 'recherche partielle (unique)';
                    console.log(`‚úÖ R√¥le trouv√© par recherche partielle: ${role.name}`);
                } else if (matchingRoles.size > 1) {
                    console.log(`‚ö†Ô∏è Plusieurs r√¥les trouv√©s pour "${roleName}":`);
                    matchingRoles.forEach(r => console.log(`   - ${r.name} (ID: ${r.id})`));
                    
                    // Demander confirmation ou utiliser le premier
                    role = matchingRoles.first();
                    methodUsed = 'recherche partielle (premier trouv√©)';
                    console.log(`‚ö†Ô∏è Utilisation du premier r√¥le trouv√©: ${role.name}`);
                }
            }
            
            // 5. M√©thode sp√©ciale pour les r√¥les avec caract√®res sp√©ciaux
            if (!role) {
                const matchingRoles = message.guild.roles.cache.filter(r => {
                    const cleanRoleName = r.name.replace(/[^\w\s]/g, '').toLowerCase().trim();
                    const cleanSearchName = roleName.replace(/[^\w\s]/g, '').toLowerCase().trim();
                    return cleanRoleName.includes(cleanSearchName) || cleanSearchName.includes(cleanRoleName);
                });
                
                if (matchingRoles.size === 1) {
                    role = matchingRoles.first();
                    methodUsed = 'nettoyage caract√®res sp√©ciaux (unique)';
                    console.log(`‚úÖ R√¥le trouv√© par nettoyage: ${role.name}`);
                } else if (matchingRoles.size > 1) {
                    console.log(`‚ö†Ô∏è Plusieurs r√¥les trouv√©s apr√®s nettoyage pour "${roleName}":`);
                    matchingRoles.forEach(r => console.log(`   - ${r.name} (ID: ${r.id})`));
                    
                    role = matchingRoles.first();
                    methodUsed = 'nettoyage caract√®res sp√©ciaux (premier trouv√©)';
                    console.log(`‚ö†Ô∏è Utilisation du premier r√¥le trouv√©: ${role.name}`);
                }
            }
            
            if (!role) {
                console.log(`‚ùå R√¥le non trouv√©: "${roleName}"`);
                console.log(`   Tentatives: exact, ID, partiel`);
                
                const errorEmbed = new EmbedBuilder()
                    .setColor('#FF0000')
                    .setTitle('‚ùå R√¥le non trouv√©')
                    .setDescription(`Le r√¥le "${roleName}" n'a pas √©t√© trouv√© dans ce serveur.`)
                    .setFooter({ text: config.bot.embedFooter, iconURL: config.bot.embedFooterIcon })
                    .setTimestamp();
                
                return message.reply({ embeds: [errorEmbed] });
            }
            
            console.log(`‚úÖ R√¥le trouv√©: ${role.name} (ID: ${role.id}) - M√©thode: ${methodUsed}`);
            
            // Stocker l'association r√¥le-√©moji
            if (!client.reactionRoles) {
                client.reactionRoles = new Map();
            }
            
            const roleMap = new Map();
            roleMap.set(emoji, role.id);
            client.reactionRoles.set(messageId, roleMap);
            
            console.log(`üíæ Configuration stock√©e:`);
            console.log(`   Message ID: ${messageId}`);
            console.log(`   √âmoji: ${emoji}`);
            console.log(`   R√¥le ID: ${role.id}`);
            console.log(`   R√¥le nom: ${role.name}`);
            console.log(`   Total configs: ${client.reactionRoles.size}`);
            
            // Ajouter la r√©action au message
            try {
                await targetMessage.react(emoji);
                console.log(`‚úÖ R√©action ajout√©e: ${emoji} pour le r√¥le ${role.name} (ID: ${role.id})`);
            } catch (error) {
                console.error(`‚ùå Erreur lors de l'ajout de la r√©action ${emoji}:`, error);
                
                const errorEmbed = new EmbedBuilder()
                    .setColor('#FF0000')
                    .setTitle('‚ùå Erreur de r√©action')
                    .setDescription('Impossible d\'ajouter la r√©action au message.')
                    .setFooter({ text: config.bot.embedFooter, iconURL: config.bot.embedFooterIcon })
                    .setTimestamp();
                
                return message.reply({ embeds: [errorEmbed] });
            }
            
            // Confirmation
            const successEmbed = new EmbedBuilder()
                .setColor('#00FF00')
                .setTitle('‚úÖ Syst√®me de r√¥les configur√©')
                .setDescription(`Le syst√®me de r√¥les par r√©action a √©t√© configur√© avec succ√®s !`)
                .addFields(
                    { name: 'üìä R√¥le configur√©', value: role.name, inline: true },
                    { name: 'üîó Message', value: `[Cliquez ici](${targetMessage.url})`, inline: true },
                    { name: 'üìã Configuration', value: `${emoji} ${role.name}`, inline: false },
                    { name: 'üîç M√©thode de d√©tection', value: methodUsed, inline: false }
                )
                .setFooter({ text: config.bot.embedFooter, iconURL: config.bot.embedFooterIcon })
                .setTimestamp();
            
            await message.reply({ embeds: [successEmbed] });
            
        } catch (error) {
            console.error('Erreur lors de la configuration du syst√®me de r√¥les:', error);
            
            const errorEmbed = new EmbedBuilder()
                .setColor('#FF0000')
                .setTitle('‚ùå Erreur')
                .setDescription('Une erreur est survenue lors de la configuration du syst√®me de r√¥les.')
                .addFields(
                    { name: 'üîç D√©tails', value: error.message, inline: false }
                )
                .setFooter({ text: config.bot.embedFooter, iconURL: config.bot.embedFooterIcon })
                .setTimestamp();
            
            await message.reply({ embeds: [errorEmbed] });
        }
    }
}; 